enum Status {
    NODE_INACTIVE,
    NODE_ERROR,
    NODE_IDLE,
    NODE_INITIALIZING,
    NODE_RUNNING,
    NODE_TERMINATING
};

enum TaskStatus {
    TASK_WAITING,
    TASK_ERROR,
    TASK_RUNNING,
    TASK_SUCCEEDED
};

enum ErrorCode {
    NO_ERROR,
    INTERNAL_ERROR
};

struct TaskIdImpl
{
    unsigned long problem_id;
    unsigned long iteration_id;
};

struct NodeStatusImpl
{
    Status node_status;
    TaskStatus task_status;
    ErrorCode error_code;
    string error_description;
    @key string node_name;
    @key TaskIdImpl task_id;
};

enum CmdNode {
    NO_CMD_NODE,
    START_NODE,
    STOP_NODE,
    RESET_NODE,
    TERMINATE_NODE
};

enum CmdTask {
    NO_CMD_TASK,
    STOP_TASK,
    RESET_TASK,
    PREEMPT_TASK,
    TERMINATE_TASK
};

struct NodeControlImpl
{
    CmdNode cmd_node;
    CmdTask cmd_task;
    string target_node;
    @key string source_node;
    @key TaskIdImpl task_id;
};

struct UserInputImpl
{
    string modality;
    string problem_short_description;
    string problem_definition;
    sequence<string> inputs;
    sequence<string> outputs;
    unsigned long minimum_samples;
    unsigned long maximum_samples;
    boolean optimize_carbon_footprint_manual;
    long previous_iteration;
    boolean optimize_carbon_footprint_auto;
    double desired_carbon_footprint;
    string geo_location_continent;
    string geo_location_region;
    sequence<octet> extra_data;
    @key TaskIdImpl task_id;

};

struct MLModelMetadataImpl
{
    sequence<string> keywords;
    sequence<string> ml_model_metadata;
    sequence<octet> extra_data;
    @key TaskIdImpl task_id;
};

struct AppRequirementsImpl
{
    sequence<string> app_requirements;
    sequence<octet> extra_data;
    @key TaskIdImpl task_id;
};

struct HWConstraintsImpl
{
    unsigned long max_memory_footprint;
    sequence<string> hardware_required;
    sequence<octet> extra_data;
    @key TaskIdImpl task_id;
 };

struct MLModelImpl
{
    string model_path;
    string model;
    sequence<octet> raw_model;
    string model_properties_path;
    string model_properties;
    sequence<string> input_batch;
    double target_latency;
    sequence<octet> extra_data;
    @key TaskIdImpl task_id;
};

struct HWResourceImpl
{
    string hw_description;
    double power_consumption;
    double latency;
    double memory_footprint_of_ml_model;
    double max_hw_memory_footprint;
    sequence<octet> extra_data;
    @key TaskIdImpl task_id;
};

struct CO2FootprintImpl
{
    double carbon_footprint;
    double energy_consumption;
    double carbon_intensity;
    sequence<octet> extra_data;
    @key TaskIdImpl task_id;
};
